
@{
    Layout = "~/Views/_LayoutGraph.cshtml";
}

    <div id='chart'>
        <svg style='height:500px'> </svg>
    </div>

    <script type="text/javascript">

        var result = { Key: "Data", Values: [] };
        //console.log(window.location.search.substring(1));
    //Pie chart example data. Note how there is only a single array of key-value pairs.
    function logData() {
        
        d3.json("~/../../odata/Logs?" + window.location.search.substring(1), function (inData) {
            
            //for (var i in inData.value) {
            //    result["Values"].push(inData.value[i]);
            //}
            var data = d3.nest()
              .key(function (d) { return d.IP; })
              .rollup(function (d) {
                  return d3.sum(d, function (g) { return 1; });
              }).entries(inData.value);

            

            //Donut chart example
            nv.addGraph(function (res) {
                var chart = nv.models.pieChart()
                    .x(function (d) { return d.key })
                    .y(function (d) { return d.values })
                    .showLabels(true)     //Display pie labels
                    .labelThreshold(.05)  //Configure the minimum slice size for labels to show up
                    .labelType("percent") //Configure what type of data to show in the label. Can be "key", "value" or "percent"
                    .donut(true)          //Turn on Donut mode. Makes pie chart look tasty!
                    .donutRatio(0.35)     //Configure how big you want the donut hole size to be.
                ;


                d3.select("#chart2 svg")
                    .datum(result.Values)
                    .transition().duration(350)
                    .call(chart);

                return chart;
            });

            nv.addGraph(function () {
                var chart = nv.models.pieChart()
                    .x(function (d) { return d.key })
                    .y(function (d) { return d.values })
                    .showLabels(true);

                d3.select("#chart svg")
                    .datum(data)
                    .transition().duration(350)
                    .call(chart);

                return chart;

            });
        });

    };

    logData();

    </script>

